volumes:
  ozon-vacancy-db-volume:
  bot-db-volume:
  zookeeper-volume:
  mongodb-volume:
  graylog-volume:
  graylog-opensearch-volume:
  prometheus-volume:
  grafana-volume:

networks:
  main:
  monitoring:

services:
  telegram-bot:
    image: telegram-bot-service
    container_name: telegram-bot-service
    build:
      dockerfile: "./external/TelegramBot/src/Segrom.JobObserver.TelegramBot.Host/Dockerfile"
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:5001/health || exit 1" ]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: always
    environment:
      ConnectionStrings__BotDb: Server=bot-db;Port=${BOT_DB_PORT};Database=${BOT_DB_NAME};User Id=${POSTGRES_USER};Password=${BOT_DB_PASS};
      Graylog__Host: ${GRAYLOG_HOST}
      Graylog__Port: ${GRAYLOG_PORT}
      KAFKA_BROKERS: "kafka-1:${KAFKA_0_EXTERNAL_PORT}"
      TG_BOT_TOKEN: ${TG_BOT_TOKEN}
      OZON_VACANCY_SERVICE_URL: http://ozon-vacancy-service:5002
    depends_on:
      - bot-db
      - kafka-1
    networks:
      - main
  
  ozon-vacancy-service:
    image: segrom.ozon-vacancy-service
    container_name: ozon-vacancy-service
    build:
      dockerfile: "./src/Segrom.JobObserver.OzonService.Host/Dockerfile"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:5001/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: always
    environment:
      VacancyUpdatePeriod: 21600
      ConnectionStrings__PostgresVacancy: Server=ozon-vacancy-db;Port=${OZON_VACANCY_DB_PORT};Database=${OZON_VACANCY_DB_NAME};User Id=${POSTGRES_USER};Password=${OZON_VACANCY_DB_PASS};
      Graylog__Host: ${GRAYLOG_HOST}
      Graylog__Port: ${GRAYLOG_PORT}
      KAFKA_BROKERS: "kafka-1:${KAFKA_0_EXTERNAL_PORT}"
    ports:
      - "${SERVICE_GRPC_PORT}:5002"
    depends_on:
      - ozon-vacancy-db
      - kafka-1
    networks:
      - main

  # Database
  ozon-vacancy-db:
    image: postgres:latest
    container_name: ozon-vacancy-db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${BOT_DB_NAME}" ]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${OZON_VACANCY_DB_NAME}
      POSTGRES_PASSWORD: ${OZON_VACANCY_DB_PASS}
    command: 
      -p ${OZON_VACANCY_DB_PORT}
    ports:
      - "${OZON_VACANCY_DB_PORT}:${OZON_VACANCY_DB_PORT}"
    depends_on:
      - graylog
    volumes:
      - ozon-vacancy-db-volume:/var/lib/postgresql/data
    networks:
      - main

  bot-db:
    image: postgres:latest
    container_name: bot-db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${BOT_DB_NAME}" ]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${BOT_DB_NAME}
      POSTGRES_PASSWORD: ${BOT_DB_PASS}
    command:
      -p ${BOT_DB_PORT}
    ports:
      - "${BOT_DB_PORT}:${BOT_DB_PORT}"
    depends_on:
      - graylog
    volumes:
      - bot-db-volume:/var/lib/postgresql/data
    networks:
      - main

# Message broker
  zookeeper:
    image: zookeeper:latest
    container_name: zookeeper
    healthcheck:
      test: nc -z localhost ${ZOOKEEPER_PORT} || exit -1
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    depends_on:
      - graylog
    volumes:
      - zookeeper-volume:/var/lib/zookeeper/data
    networks:
      - main

  kafka-1:
    image: bitnami/kafka:latest
    container_name: kafka-1
    healthcheck:
      test: /kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server kafka:${KAFKA_0_CLIENT_PORT} || exit 1
      interval: 1s
      timeout: 60s
      retries: 60
    restart: always
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_LISTENERS: CLIENT://:${KAFKA_0_CLIENT_PORT},EXTERNAL://:${KAFKA_0_EXTERNAL_PORT}
      KAFKA_CFG_ADVERTISED_LISTENERS: CLIENT://kafka-1:${KAFKA_0_CLIENT_PORT},EXTERNAL://kafka-1:${KAFKA_0_EXTERNAL_PORT}
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: CLIENT
    ports:
      - "${KAFKA_0_CLIENT_PORT}:${KAFKA_0_CLIENT_PORT}"
      - "${KAFKA_0_EXTERNAL_PORT}:${KAFKA_0_EXTERNAL_PORT}"
    depends_on:
      - zookeeper
    networks:
      - main
      
  kafka-ui:
    container_name: kafka-ui
    image: obsidiandynamics/kafdrop
    depends_on:
      - kafka-1
    ports:
      - "10900:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka-1:${KAFKA_0_EXTERNAL_PORT}"
      SERVER_SERVLET_CONTEXTPATH: "/"
    networks:
      - main

# Monitoring
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-volume:/prometheus
    networks:
      - monitoring
  
  grafana:
    image: grafana/grafana-enterprise:10.1.0
    volumes:
      - grafana-volume:/var/lib/grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${MONITORING_ADMIN_PASS}
    depends_on:
      - prometheus
      - graylog
    networks:
      - monitoring

# Graylog Elasticsearch MongoDB
  graylog:
    image: graylog/graylog:6.2.2
    hostname: ${GRAYLOG_HOST}
    environment:
      GRAYLOG_PASSWORD_SECRET: ${GRAYLOG_PASSWORD_SECRET}
      GRAYLOG_ROOT_PASSWORD_SHA2: ${MONITORING_ADMIN_PASS_SHA2}
      GRAYLOG_HTTP_EXTERNAL_URI: http://localhost:9000/
      GRAYLOG_MONGODB_URI: mongodb://mongo/graylog
      GRAYLOG_ELASTICSEARCH_HOSTS: http://admin:${MONITORING_ADMIN_PASS}@opensearch:9200
      GRAYLOG_ROOT_TIMEZONE: Europe/Moscow
    volumes:
      - graylog-volume:/usr/share/graylog/data/journal
#      - ./graylog.conf:/usr/share/graylog/data/config/graylog.conf:ro
    depends_on:
      - mongo
      - opensearch
    ports:
      - "9000:9000"
#      - "${GRAYLOG_PORT}:12201/udp" # GELF UDP input
    networks:
      - monitoring
      - main
  
  mongo:
    image: mongo:6.0
    volumes:
      - mongodb-volume:/data/db
    networks:
      - monitoring

  opensearch:
    image: opensearchproject/opensearch:2.9.0
    container_name: opensearch
    environment:
      cluster.name: opensearch-cluster
      node.name: os01
      discovery.type: single-node
      bootstrap.memory_lock: true
      OPENSEARCH_JAVA_OPTS: -Xms512m -Xmx512m
      OPENSEARCH_INITIAL_ADMIN_PASSWORD: ${MONITORING_ADMIN_PASS}
      plugins.security.disabled: true
    volumes:
      - graylog-opensearch-volume:/usr/share/opensearch/data
    networks:
      - monitoring